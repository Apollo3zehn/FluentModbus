//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FluentModbus {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ErrorMessage {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ErrorMessage() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FluentModbus.Resources.ErrorMessage", typeof(ErrorMessage).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid use of broadcast: Unit identifier &apos;0&apos; can only be used for write operations. ähnelt.
        /// </summary>
        internal static string Modbus_InvalidUseOfBroadcast {
            get {
                return ResourceManager.GetString("Modbus_InvalidUseOfBroadcast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The value is invalid. Valid values are in the range of 0 - 65535. ähnelt.
        /// </summary>
        internal static string Modbus_InvalidValueUShort {
            get {
                return ResourceManager.GetString("Modbus_InvalidValueUShort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The use of no parity bit requires 2 stop bits. ähnelt.
        /// </summary>
        internal static string Modbus_NoParityRequiresTwoStopBits {
            get {
                return ResourceManager.GetString("Modbus_NoParityRequiresTwoStopBits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The function code received in the query is not an allowable action for the server. This may be because the function code is only applicable to newer devices, and was not implemented in the unit selected. It could also indicate that the server is in the wrong state to process a request of this type, for example because it is unconfigured and is being asked to return register values. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x01_IllegalFunction {
            get {
                return ResourceManager.GetString("ModbusClient_0x01_IllegalFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The data address received in the query is not an allowable address for the server. More specifically, the combination of reference number and transfer length is invalid. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x02_IllegalDataAddress {
            get {
                return ResourceManager.GetString("ModbusClient_0x02_IllegalDataAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A value contained in the query data field is not an allowable value for server. This indicates a fault in the structure of the remainder of a complex request, such as that the implied length is incorrect. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x03_IllegalDataValue {
            get {
                return ResourceManager.GetString("ModbusClient_0x03_IllegalDataValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The quantity of registers is out of range (1..123). Make sure to request a minimum of one register. If you use the generic overload methods, please note that a single register consists of 2 bytes. If, for example, 1 x int32 value is requested, this results in a read operation of 2 registers. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x03_IllegalDataValue_0x7B {
            get {
                return ResourceManager.GetString("ModbusClient_0x03_IllegalDataValue_0x7B", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The quantity of registers is out of range (1..125). Make sure to request a minimum of one register. If you use the generic overload methods, please note that a single register consists of 2 bytes. If, for example, 1 x int32 value is requested, this results in a read operation of 2 registers. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x03_IllegalDataValue_0x7D {
            get {
                return ResourceManager.GetString("ModbusClient_0x03_IllegalDataValue_0x7D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The quantity of coils is out of range (1..2000). ähnelt.
        /// </summary>
        internal static string ModbusClient_0x03_IllegalDataValue_0x7D0 {
            get {
                return ResourceManager.GetString("ModbusClient_0x03_IllegalDataValue_0x7D0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An unrecoverable error occurred while the server was attempting to perform the requested action. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x04_ServerDeviceFailure {
            get {
                return ResourceManager.GetString("ModbusClient_0x04_ServerDeviceFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The server has accepted the request and is processing it, but a long duration of time will be required to do so. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x05_Acknowledge {
            get {
                return ResourceManager.GetString("ModbusClient_0x05_Acknowledge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The server is engaged in processing a long–duration program command. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x06_ServerDeviceBusy {
            get {
                return ResourceManager.GetString("ModbusClient_0x06_ServerDeviceBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The server attempted to read record file, but detected a parity error in the memory. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x08_MemoryParityError {
            get {
                return ResourceManager.GetString("ModbusClient_0x08_MemoryParityError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The gateway was unable to allocate an internal communication path from the input port to the output port for processing the request. ähnelt.
        /// </summary>
        internal static string ModbusClient_0x0A_GatewayPathUnavailable {
            get {
                return ResourceManager.GetString("ModbusClient_0x0A_GatewayPathUnavailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No response was obtained from the target device ähnelt.
        /// </summary>
        internal static string ModbusClient_0x0B_GatewayTargetDeviceFailedToRespond {
            get {
                return ResourceManager.GetString("ModbusClient_0x0B_GatewayTargetDeviceFailedToRespond", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Array length must be equal to two bytes. ähnelt.
        /// </summary>
        internal static string ModbusClient_ArrayLengthMustBeEqualToTwo {
            get {
                return ResourceManager.GetString("ModbusClient_ArrayLengthMustBeEqualToTwo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Array length must be greater than two bytes and even. ähnelt.
        /// </summary>
        internal static string ModbusClient_ArrayLengthMustBeGreaterThanTwoAndEven {
            get {
                return ResourceManager.GetString("ModbusClient_ArrayLengthMustBeGreaterThanTwoAndEven", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The exception code received from the server is invalid. ähnelt.
        /// </summary>
        internal static string ModbusClient_InvalidExceptionCode {
            get {
                return ResourceManager.GetString("ModbusClient_InvalidExceptionCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The protocol identifier is invalid. ähnelt.
        /// </summary>
        internal static string ModbusClient_InvalidProtocolIdentifier {
            get {
                return ResourceManager.GetString("ModbusClient_InvalidProtocolIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The responsed function code is invalid. ähnelt.
        /// </summary>
        internal static string ModbusClient_InvalidResponseFunctionCode {
            get {
                return ResourceManager.GetString("ModbusClient_InvalidResponseFunctionCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The response message length is invalid. ähnelt.
        /// </summary>
        internal static string ModbusClient_InvalidResponseMessageLength {
            get {
                return ResourceManager.GetString("ModbusClient_InvalidResponseMessageLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The unit identifier is invalid. Valid node addresses are in the range of 0 - 247. Use address &apos;0&apos; to broadcast write command to all available servers. ähnelt.
        /// </summary>
        internal static string ModbusClient_InvalidUnitIdentifier {
            get {
                return ResourceManager.GetString("ModbusClient_InvalidUnitIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quantity must be a positive integer number. Choose the &apos;count&apos; parameter such that an even number of bytes is requested. ähnelt.
        /// </summary>
        internal static string ModbusClient_QuantityMustBePositiveInteger {
            get {
                return ResourceManager.GetString("ModbusClient_QuantityMustBePositiveInteger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The TCP connection closed unexpectedly. ähnelt.
        /// </summary>
        internal static string ModbusClient_TcpConnectionClosedUnexpectedly {
            get {
                return ResourceManager.GetString("ModbusClient_TcpConnectionClosedUnexpectedly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not connect within the specified time. ähnelt.
        /// </summary>
        internal static string ModbusClient_TcpConnectTimeout {
            get {
                return ResourceManager.GetString("ModbusClient_TcpConnectTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The unit identifier is invalid. Valid node addresses are in the range of 1 - 247. ähnelt.
        /// </summary>
        internal static string ModbusServer_InvalidUnitIdentifier {
            get {
                return ResourceManager.GetString("ModbusServer_InvalidUnitIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No unit found for the specified unit identifier. ähnelt.
        /// </summary>
        internal static string ModbusServer_UnitIdentifierNotFound {
            get {
                return ResourceManager.GetString("ModbusServer_UnitIdentifierNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A unit identifier of 0 is only applicable in single unit mode. ähnelt.
        /// </summary>
        internal static string ModbusServer_ZeroUnitOverloadOnlyApplicableInSingleUnitMode {
            get {
                return ResourceManager.GetString("ModbusServer_ZeroUnitOverloadOnlyApplicableInSingleUnitMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There is no valid request available. ähnelt.
        /// </summary>
        internal static string ModbusTcpRequestHandler_NoValidRequestAvailable {
            get {
                return ResourceManager.GetString("ModbusTcpRequestHandler_NoValidRequestAvailable", resourceCulture);
            }
        }
    }
}
