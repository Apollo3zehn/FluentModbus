<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<# 
	var csstring = File.ReadAllText("src/FluentModbus/Client/ModbusRtuClient.cs");
	var match = Regex.Matches(csstring, @"(protected override Span<byte> TransceiveFrame\()(.*?)\)(.*?\n        })", RegexOptions.Singleline)[0];

#>
 /* This is automatically translated code. */

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace FluentModbus
{
	public partial class ModbusRtuClient
	{
		<#
			// replace AsSpan
			var signature = match.Groups[2].Value;
			var body = match.Groups[3].Value;
			body = Regex.Replace(body, "AsSpan", "AsMemory");
			body = Regex.Replace(body, @"_serialPort.Write\((.*?)\)", m => $"await _serialPort.WriteAsync({m.Groups[1]}, cancellationToken).ConfigureAwait(false)");
			body = Regex.Replace(body, @"_serialPort.Read\((.*?)\)", m => $"await _serialPort.ReadAsync({m.Groups[1]}, cancellationToken).ConfigureAwait(false)");

			Write($"///<inheritdoc/>\n        protected override async Task<Memory<byte>> TransceiveFrameAsync({signature}, CancellationToken cancellationToken = default){body}");
		#>
	
	}
}