<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<# 
	var csstring = File.ReadAllText("FluentModbus/src/FluentModbus/Client/ModbusClient.cs");
	var methodsToConvert = Regex.Matches(csstring, @"        \/{3}.*?\n        }", RegexOptions.Singleline);

#>
 /* This is automatically translated code. */

#pragma warning disable CS1998

using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;

namespace FluentModbus
{
	public abstract partial class ModbusClient
	{
		private protected abstract Task<Memory<byte>> TransceiveFrameAsync(byte unitIdentifier, ModbusFunctionCode functionCode, Action<ExtendedBinaryWriter> extendFrame, CancellationToken cancellationToken);

<#
	foreach (Match method in methodsToConvert)
	{
		var methodString = method.Value;

		// add cancellation token XML comment
		methodString = Regex.Replace(methodString, @"(>\r?\n)        public", m => $"{m.Groups[1]}        /// <param name=\"cancellationToken\">The token to monitor for cancellation requests. The default value is <see cref=\"CancellationToken.None\"/>.</param>\n        public", RegexOptions.Singleline);

		// add cancellation token
		methodString = Regex.Replace(methodString, @"(>\r?\n        public.*?)\((.*?)\)", m => $"{m.Groups[1]}({m.Groups[2]}, CancellationToken cancellationToken = default)");

		// replace return values
		methodString = Regex.Replace(methodString, "public void", "public async Task");
		methodString = Regex.Replace(methodString, "public Span<(.*?)>", m => $"public async Task<Memory<{m.Groups[1]}>>");

		// replace method name
		methodString = Regex.Replace(methodString, @"(public async [^ ]*) (.*?)([<|\(])", m => $"{m.Groups[1]} {m.Groups[2]}Async{m.Groups[3]}");

		// replace TranceiveFrame
		methodString = Regex.Replace(methodString, @"(this.TransceiveFrame)(.*?\n            })\);", m => $"await {m.Groups[1]}Async{m.Groups[2]}, cancellationToken).ConfigureAwait(false);", RegexOptions.Singleline);

		methodString = Regex.Replace(methodString, @"(this.TransceiveFrame)(.*?\n            })\)\.Slice", m => $"(await {m.Groups[1]}Async{m.Groups[2]}, cancellationToken).ConfigureAwait(false)).Slice", RegexOptions.Singleline);

		// replace MemoryMarshal
		methodString = Regex.Replace(methodString, @"MemoryMarshal(.*?)\((\s*this.*?)(\(.*?\))\);", m => $"SpanExtensions{m.Groups[1]}(await {m.Groups[2]}Async{m.Groups[3]}.ConfigureAwait(false));");

		// replace remaining (WriteXXXRegister(s))
		methodString = Regex.Replace(methodString, @"(\n            )(this\.Write.*?Registers?)(\(.*?\));", m => $"{m.Groups[1]}await {m.Groups[2]}Async{m.Groups[3]}.ConfigureAwait(false);", RegexOptions.Singleline);

		methodString += "\n\n";
		this.Write(methodString);
	}
#>
	}
}

#pragma warning restore CS1998